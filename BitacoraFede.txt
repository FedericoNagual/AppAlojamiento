////////////////////////////

Bitacora	Federico

Indice, Horas del dia que se trabajo + problematica encontrada + que se pudo avanzar

Fecha: 24/11/2022

Hs:				2hs

Avance:	Aramar las bases para tener toda la guia basica

Problematica:	Poco avance

////////////////////////////

Fecha: 25/11/2022

Hs:				2hs

Avance:			Instale el postgreSQL

Problematica:	

	No logre iniciar o ver la BD, no funcionaron los comandos cmd para poder ver si se instalo bien y si funcionaba la Bd y poder verla.
	
////////////////////////////

Fecha: 26/11/2022

Hs: 			5hs

Avance:			Se pudo armar la BD con el nombre de "Alojamientos" y se cargo el script;

Problematica:	Configuracion general del ambiente 


////////////////////////////

Fecha:	27/11/2022

Hs:				5hs 

Avance:			
				Armado estandar de la estidad modelo, repository, servicio, controller, implementacion y adelanto de la configuracion ademas de ir sumando dependencias y configuraciones para que tomen las dependencias, home vacio para pruebas

Problematica:	Poco tiempo para hacer pruebas y falta la parte de la vista.


////////////////////////////

Fecha:	28/11/2022

Hs:		1hs

Avance:

	Actualice la app y estuve probando e investigando el error con las dependencias (Que tambien aparecian los warnning y los errors en el panel de problemas, la actualizacion fue exitosa
	

Problematica:

	Sigue sin levantar la app, posible solucion Archivo configuracion cuando levanta la Sprint Aplication o si es necesario ejecutar una Java aplication

////////////////////////////

Fecha: 02/12/2022

Hs:		2hs

Avance:

	Replanteo de las dependencias de la app para poder tener compatibilidad con las herramientas que se desea utilizar en la app y poder hacer uso de -Inyección de dependencias-
	

Problematica:

	Complejo lo compatible que es Java con sus dependencias y con sus versiones de java, mucho texto y mucha investigacion.
	

////////////////////////////

Fecha:	05/12/2022

Hs:		2hs

Avance:

	Se pudo compilar el proyecto pero no funciona la vista 


Problemativa:

	No funciona la vista por un tema de que no carga las palabras, como si un crookis no lo permite o algo por el estilo.
	
////////////////////////////

Fecha:	06/12/2022

Hs:		4hs

Avance:

	Volcar las clases ya armadas para ver como interactuan con la app y las entitys, primeramente armar una porcion del modelo acotado y tratar de armar la coneccion con la base de datos con un simple Alta, Baja y modificacion para armar el CRUD de las entidades de la app
	

Problematica:

	Encontrar tiempo para armar un modelo viable de formulario para poder tener para el equipo
	ademas de probar el CRUD con la BD


////////////////////////////

Facha:	07/12/2022

Hs:		3hs

Avance:	

	Avance se pudo armar la clase principal de Habitacion y un formulario para poder examinar y hacer las pruebas de BackEnd, casi todas las validaciones por parte del front funcionan


Problematica:

	Pruebas con errores en los "Macheos" ya que no reconoce la entidad por la table, no se si por no tener el prototipado correcto en la base de datos o al estar cargado con otros parametros que no estan bien mapeados, queda pendenciente hacer mas investigacion sobre el tema de PostgreSQL y sus datos. Para ver como se comportan. Algunos datos Number se muestran con decimales los cuales estaria bueno restringir.


////////////////////////////

Fecha:	08/12/2022

Hs:		5hs

Avance:

	Se pudo armar el formulario para ver el alta de habitacion, siguen las pruebas con la base de datos, efectivamente despues de reformar la BD se pudo generar el alta, se cambio el id por bigserial y el money por numeric


Problematica:

	Se recomienda no trabajar con money asi que mejor usar un "numeric" de 9,2 para emparejar
	por lo tanto se reajusta el valor de money, ya que java tiene problemas para entender que tipo de dato es.

////////////////////////////

Fecha:	12/12/2022

Hs:		3hs

Avance:

	Re organizacion del trello para poder trabajar mas organizados y reestructuracion de un manual para poder seguir el funcionamiento del equipo de trabajp


Problematica:

	Poco tiempo para explicarles a mis compañeros, espero que sea claro y les sirva.
	

////////////////////////////

Fecha:	13/12/2022

Hs:		6hs

Avance:

	Se pudo avanzar con la vista principal de los datos y poder dejar armado el formulario de Habitacion.
	Se pudo armar el DTO y construccion del dato Habitacion que se modifico desde el BE hasta la BD.
	Se empezo a armar las vistas para la Consulta Habitacion que realiza un listar para traer todo lo que tiene la BD.
	
Problematica:

	Mucho tiempo hasta entender el problema de los panelgrid siendo de p: y de h: la documentacion fue rebuscada y se tuvo que buscar por propiedades y por atributos y valores para esos atributos.
	Problemas al reorganizar las carpetas, fijarse de como organizarlas por las carpetas y como activarlas desde el home para poder ir a buscar los xhtml.
	
////////////////////////////

Fecha:	14/12/2022

Hs:		4hs

Avance:

	Se pudo armar la vista y avanzar con la investigacion para incorporar mas utilidad a las librerias tanto a primefaces como a primeIcons, se pudo armar al vista y reorganizar las carpetas de las vistas de los formularios y los template.
	
Problematica:

	No se termino de integrar el primeIcons para las pruebas realizadas no reconoce el llamado de la libreria.
	
/////////////////////////////
Fecha:	02/01/2023

Hs:		3hs

Avance:

	Se pudo armar el pasaje del trello al jira para armar las incidencias de trabajo del proyecto Mi Alojamiento.
	Se pudo actualizar el manual de trabajo para los chicos en jira.
	Ajuste de las incidencias del proyecto y muestra del proyecto con mis compañero y puesta a punto para que puedan trabajar en el proyecto y aportar.
	
Problematica:

	Poco tiempo muchas tareas mucho que pensar.

/////////////////////////////
Fecha:	05/01/2023

Hs:		4hs

Avance:

	Se pudo armar la inc 0025 y la inc 0029, sumado al manejo de la librerias FacesMessage para los msj de Info, Ward, error Fatal y proximamente. Ademas de armar el front y back para las consultas a la bd para traer la entidad habitacion.
	
Problematica:

	Poco avance pero se pudo armar algo y tengo que pensar como armar el login, proximanente encarar el borrar y modificar, estas pantallas es posible que se puedan armar con botones mas simples para tener un mejor flojo, aunque no se si es necesario que desde todos los paneles se tenga que pasar a todos, en lo que navegabilidad respecta, por ejemplo desde Alta, tengo que poder editar o tengo que poder volver al menu de ver ?. A lo mejor desde el menu buscar y si obtengo un elemento puntual, tengo que poder eliminarlo y modificarlo, siendo la vista principal la de busqueda.
	
/////////////////////////////
Fecha:	09/01/2023

Hs:		4hs

Avance:

	Armar la grilla para mostrar todos los elementos traidos de la BD
	
Problematica:

	No se pudo mostrar todas las funciones de la grilla y del listado, mas basico y de un solo listado, probar de la manera mas simple llamando un elemento grilla para gestionarlo.
	
/////////////////////////////
Fecha:	10/01/2023

Hs:		3Hs

Avance:

	Se investigo para hacer el login y como funciona, tambien como hacer una lista o listado para mostrar todos los elementos que se cargaron previamente y poder listarlos para saber el total

Problematica:

	No se llego con el tiempo y queda para otro dia.


/////////////////////////////
Fecha: 29/01/2023

Hs:		4hs

Avance:	
	
	Se termino el consulta, alta, modificacion y baja de habitacion

Problematica:

/////////////////////////////
Fecha:	21/02/2023

Hs:		6hs.

Avance:

	Analizar los videos de SoloCode (Profe amiga) Para poder investigar temas sobre JPA y JSF. 
	
Problematica:

	Encontre la solucion a los mapeos, por falta de tiempo quede en agarrar 3 clases relacionadas como pais, provincia y ciudad para probar las altas y ver su comportamiento con respecto a como arme las clases.
	
Anotaciones:

	Anotaciones sobre lo investigado. JPA (Java Persistence API).
	Traduce una base de datos para armar los objetos o hacerlo al reves.
	Java <-- --> BD.
	Entiende mediante annotations@
	El puente para conectar es un proveedores de JPA. Necesario para armar un CRUD o AMBL
	
	Mapear los objetos con la bd mediante las annotations@ decimos como es para la base de datos
	@Entity  -> Para decir que es una tabla en la base de datos
	@Id con @GeneratedValue(strategy = GenerationType.SEQUENCE ) Establece la Primary key y estable la forma de generacion del id que sea automatica y secuencial.
	@Basic Para hacer referencia a atributos comunes.
	@Temporal se usa para fechas.
	@Temporal(TemporalType.TIMESTAMP) para tener en cuenta la hora
	@Temporal(TemporalType.DATE) para tener en cuenta la fecha DATE.
	@OneToMany: Indicar una relacion unidireccional de 1 a N.
	@OneToOne: Indicar una relacion de 1 a 1.
	@ManyToMany: Indicar una relacion n a n.
	
	JPA controllers son para crear las tablas.
	Tomar una clase y crear una entidad en la BD.
	
	Dentro de los metodos que proporciona JPA tenemos varios para hacer diferentes CRUD
	-Para Crear usamos el create(entity)
	-Para editar update usamos el edit(entity)
	-Para buscar usamos el find (trae solo 1 entity) o el find Entities (trae todas las entidades lista completa)
	-Para eliminar usamos el destroy(id)
	
	@OneToOne relacion 1 a 1.
	Alumno tiene 1 sola Carrera (Carrera y Alumno son las entidades)
	Al ser una relacion 1 a 1 puede tener estar en los dos pero corresponde mas al Alumno
	Entonces Alumno dentro tiene 
	
	@OneToOne
	private Carrera carrera;
	
	Obliga a crear primero los datos de Carrera y despues los de Alumno.
	
	// Segun Mentoria de Software
	Utiliza una composicion de Banco , Moneda, Cuenta
	En la Cual 1 Banco tiene Muchas Cuentas // 1 Banco  * Cuentas
	Y 1 Moneda tiene muchas Cuentas	// 1 Moneda * Cuentas
	Por lo cual Cuenta tiene 2 FK de Banco y Moneda
	
	Osea que dentro de Cuenta.
	@ManyToOne
	@JoinColumn(name = "En la bd")
	Banco banco;
	
	@ManyToOne
	@JoinColumn(name = "En la bd")
	Moneda moneda; 
	
	// Necesario tener que ser JoinColumn y tiene que ser una clase entity no puede ser un tipo de dato primitivo.
	
	
	Dentro de Banco.
	Tiene sus atributos pero no tiene ningun Cuenta 
	
	
	Dentro de Moneda. en otro ejemplo a diferencia de Banco puede ser.
	
	@OneToMany(mappedBy="nombre de la variable donde se lo llama") por ejemplo mappedBy="moneda"
	List<Cuenta> listaCuentas;		//Es una lista ya que llama a muchos.
	
	//Osea la clase que tiene el @ManyToOne con el objeto de ese tipo de dato en este caso seria Moneda
	// Se puede cambia el List por un Set siempre y cuando la lista no se repita el dato.
	
	//Se puede tener un @OneToMany pero no un @ManyToOne Ya que necesita mapear
	
/////////////////////////////
Fecha:	22/02/2023

Hs:		04hs

Avance:

	Pude armar los objetos bien de cada clase y contrastarlos con algunos alta de, pero todavia me faltan
	
Problematica:

	Poco tiempo para mucho codigo, no me alcanzan los dedos, despues continuo arreglando el codigo y me apoyo en la BD
	
/////////////////////////////